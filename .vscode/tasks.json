{
    "version": "2.0.0",
    "options": {
        "shell": {
            "executable": "bash",
            "args": [
                "-ci"
            ]
        }
    },
    "tasks": [
        {
            "label": "Make Firmware",
            "type": "shell",
            "command": "make -j8 all TARGET=arm_firmware OPT=\"-O2\" BINPATH=/usr/bin/",
            "options": {
                "cwd": "${workspaceRoot}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Make Firmware (without optimization)",
            "type": "shell",
            "command": "make -j8 all TARGET=arm_firmware BINPATH=/usr/bin/",
            "options": {
                "cwd": "${workspaceRoot}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Clean build & Make Firmware",
            "type": "shell",
            "command": "make clean && make -j8 all TARGET=arm_firmware OPT=\"-O2\" BINPATH=/usr/bin/",
            "options": {
                "cwd": "${workspaceRoot}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Clean build & Make Firmware (without optimization)",
            "type": "shell",
            "command": "make clean && make -j8 all TARGET=arm_firmware BINPATH=/usr/bin/",
            "options": {
                "cwd": "${workspaceRoot}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Load Firmware (inside WSL)",
            "type": "shell",
            "command": "st-flash write ${workspaceFolder}/build/arm_firmware.bin 0x08000000",
            "options": {
                "cwd": "${workspaceRoot}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Load Firmware (via Windows)",
            "type": "shell",
            "command": "st-flash.exe write ${workspaceFolder}/build/arm_firmware.bin 0x08000000",
            "options": {
                "cwd": "${workspaceRoot}"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
        },
        {
            "label": "launch ST-Link",
            "command": "st-util.exe",
            "type": "shell",
            "isBackground": true,
            "problemMatcher": [
                // This problem matcher is required to get rid of the pop-up
                // It doesn't actually do anything
                {
                    "pattern": [
                        {
                            "regexp": ".",
                            "file": 0,
                            "location": 1,
                            "message": 2
                        }
                    ],
                    // What this does: Checks the first two lines of output from st-util to see if the server actually started and continue
                    // Here I got fancy and thought that this might actually match something that I can re-use
                    // Turns there's no point in matching output from st-util, since it doesn't help you with your codebase
                    // But the regex looks fancy, so I kept it.
                    "background": {
                        "beginsPattern": {
                            "file": 7,
                            "regexp": "^([0-9]+)-([0-9]+)-([0-9]+)T([0-9]+):([0-9]+):([0-9]+) INFO (.*.c): (.+\/.+): .*$"
                        },
                        "endsPattern": {
                            "file": 7,
                            "regexp": "^([0-9]+)-([0-9]+)-([0-9]+)T([0-9]+):([0-9]+):([0-9]+) INFO (.*.c): Listening at \\*:4242..."
                        }
                    }
                }
            ]
        },
        {
            "label": "postDebugKill",
            "command": "echo ${input:terminate}",
            "type": "shell",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "terminate",
            "type": "command",
            "command": "workbench.action.tasks.terminate",
            "args": "terminateAll"
        }
    ],
}